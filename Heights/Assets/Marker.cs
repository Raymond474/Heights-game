using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Marker : MonoBehaviour
{
    /*
    public GameObject player;
    public GameObject prefab;
    private int counter = 0;
    private bool space;
    private bool left;
    private bool right;
    private new List<byte> inputs = new List<byte>();
    private new List<double> timeStamps = new List<double>{0.1, 0.7, 1.2, 1.7, 2.2, 2.7, 3.2, 3.7, 4.29, 4.83, 5.36, 5.83, 6.32, 6.9, 7.4, 7.9, 8.4, 9.0, 9.48, 10.0, 10.5, 11.05, 12.58, 12.99, 13.47, 13.65, 13.85, 14.95, 16.2, 16.65, 18.34, 19.63, 20.03, 20.13, 20.26, 20.47, 20.7, 21.73, 23.02, 23.44, 25.15, 27.07, 27.26, 27.52, 28.55, 29.4, 29.62, 29.83, 30.05, 30.25, 33.7, 33.9, 34.1, 34.3, 34.5, 34.7, 34.9, 35.18, 35.4, 35.9, 36.2, 36.7, 37.1, 38.5, 39.2, 39.65, 41.0, 41.5, 42.3, 43.3, 44.7, 45.05, 47.0, 47.55, 48.6, 49.2, 49.8, 50.3, 50.9, 51.45, 52.5, 53.2, 54.6, 55.1, 55.7, 56.1, 56.36, 57.0, 59.5, 61.4, 62.2, 62.8, 63.6, 64.1, 64.44, 65.23, 65.6, 66.18, 66.63, 67.1, 68.0, 68.9, 69.68, 70.3, 70.7, 71.25, 71.3, 72.1, 72.28, 72.55, 72.9, 73.1, 74.3, 74.7, 75.3, 76.6, 77.2, 77.8, 78.67, 79.35, 79.55, 80.4, 80.7, 81.6, 82.2, 82.8, 83.25, 83.9, 84.3, 86.9, 92.0, 92.5, 93.5, 94.25, 94.6, 95.9, 97.03, 97.4, 97.86, 98.31, 98.75, 99.15, 99.82, 100.22999999999999, 100.4, 101.1, 101.3, 101.95, 102.0, 102.9, 105.6, 106.25, 107.14, 107.3, 107.6, 108.1, 108.34, 108.55, 108.9, 108.9, 109.5, 110.6, 111.0, 111.2, 112.28, 112.85, 113.57, 113.8, 113.97999999999999, 114.6, 114.6, 114.96000000000001, 115.14, 115.37, 115.7, 117.5, 118.7, 119.1, 119.75999999999999, 120.2, 120.5, 120.7, 121.1, 121.3, 121.5, 121.95, 122.1, 122.5, 122.95, 123.5, 123.9, 123.9, 124.5, 124.9, 124.9, 125.67, 126.2, 126.6, 126.8, 126.98, 127.5, 128.1, 128.43, 128.7, 128.9, 128.9, 129.17, 131.0, 132.86, 133.1, 133.3, 133.7, 133.9, 134.39, 134.82, 135.2, 135.6, 135.8, 136.2, 136.6, 136.9, 137.3, 137.9, 138.3, 138.7, 139.56, 140.3, 140.55, 140.77, 141.3, 141.6, 141.9, 142.24, 142.5, 142.9, 142.9, 143.6, 143.9, 144.0, 145.7, 146.36, 146.7, 147.0, 147.4, 147.55, 148.45, 148.7, 149.0, 149.26, 149.8, 150.2, 150.65, 151.43, 151.9, 152.06, 152.48, 152.5, 153.15, 153.55, 153.55, 154.0, 154.1, 154.65, 154.9, 155.1, 155.3, 155.9, 156.3, 156.3, 156.62, 156.62, 158.4, 160.0, 160.38, 160.73, 161.18, 161.38, 161.6, 162.1, 162.5, 162.75, 162.9, 163.1, 163.44, 163.87, 164.06, 164.5, 164.9, 165.3, 165.7, 166.0, 166.16, 166.8, 167.2, 167.5, 167.9, 168.1, 168.5, 168.9, 169.1, 169.5, 169.7, 169.9, 170.3, 170.3, 171.0, 171.26, 171.5, 171.7, 171.9, 172.99, 173.72, 174.05, 174.3, 174.7, 175.1, 175.5, 175.8, 176.37, 176.7, 177.1, 177.5, 178.0, 178.3, 178.75, 179.16, 179.65, 180.5, 180.9, 180.9, 181.7, 182.2, 182.6, 182.83, 183.3, 183.64, 184.05, 185.5, 190.8, 191.12, 191.45, 191.73, 191.9, 192.5, 192.81, 193.1, 193.5, 193.9, 194.3, 194.74, 195.2, 195.5, 195.95, 196.45, 196.75, 197.6, 198.0, 198.57999999999998, 198.9, 199.2, 199.65, 199.9, 200.3, 200.94, 201.61, 201.95, 202.3, 202.3, 202.64, 202.64, 203.71, 204.43, 204.76, 205.04, 205.4, 205.7, 206.1, 206.5, 206.8, 207.07, 207.35, 207.9, 208.3, 208.7, 209.06, 209.5, 209.92000000000002, 210.1, 210.3, 210.5, 210.5, 211.25, 211.69, 212.3, 212.5, 212.9, 213.3, 213.51, 213.95, 214.1, 214.3, 214.5, 215.36, 215.64, 215.9, 216.3, 216.3, 217.4, 218.1, 218.5, 218.67000000000002, 219.1, 219.5, 219.9, 220.22, 220.5, 220.8, 221.0, 221.5, 222.1, 222.47, 222.7, 222.9, 223.5, 223.9, 224.92000000000002, 225.5, 226.34, 227.2, 227.7, 228.3, 228.9, 229.7, 231.4, 233.5, 236.1, 237.9 };

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Space))
        {
            space = true;
        }
        if (Input.GetKeyDown(KeyCode.LeftArrow))
        {
            inputs.Add(0);
        }
        if (Input.GetKeyDown(KeyCode.RightArrow))
        {
            inputs.Add(1);
        }

        if (Input.GetKeyDown(KeyCode.P))
        {
            Debug.Log("Print");
            for (var i = 0; i < inputs.Count; i++)
            {
                string direction;

                if (inputs[i] == 0)
                {
                    direction = "left";
                }
                else
                {
                    direction = "right";
                }
                Debug.Log("Input " + i + " is " + direction);
            }
        }
    }

    private void FixedUpdate()
    {
        double timeSong = Time.realtimeSinceStartupAsDouble - StartMusic.songStartTime;
        double ti = System.Math.Round(timeSong, 2);
        
        if (StartMusic.songStartTime == 0)
        {
            ti = 0;
            Debug.Log("00000");
        }

        if (search(ti))
        {
            placeMarker(ti);
        }

        if (space)
        {
            placeMarker(ti);
        }
    }

    private bool search(double key)
    {
        double target = timeStamps[0];//if outofbounds display victory screen

        if (key >= target)
        {
            Debug.Log(key + " " + target);
            timeStamps.RemoveAt(0);
            return true;
        }
        else
        {
            return false;
        }
    }

    private void placeMarker(double ti)
    {
        Vector3 position = new Vector3(player.transform.localPosition.x, player.transform.localPosition.y, player.transform.localPosition.z);
        Quaternion rotation = new Quaternion(0, 0, 0, 0);
        GameObject obj = Instantiate(prefab, position, rotation) as GameObject;
        Debug.Log("Circle: " + ++counter + " at time: " + ti);
        space = false;
    }
    */
}
